<div class="ym-grid">	
	<h2>Basic Tutorial</h2>
	<p>This is basic tutorial, not all covered on this tutorial. This purpose just to make you has overview what this framework can do.</p>
	<p>Before we start to coding, we need to include li3 command to PATH, because it will frequently use when we code</p>
	<pre class="brush: bash">$> export PATH=$PATH:/to/project/libraries/lithium/bin</pre>
	
	<div class="jquery_tabs">
		<h4>Working with Database</h4>
		<div class="text">
			<div class="ym-grid">				
				<div class="ym-g20 ym-gl">
					<div class="ym-gbox">
						<div class="ym-vlist">
							<h6>Chapter Index</h6>
							<ul>
								<li><a href="#configuration">Configuration</a></li>
								<li><a href="#initialization">Building Model</a></li>
								<li><a href="#generator">Using XML Generator</a></li>
								<li><a href="#database-scheme">Generate Database Scheme</a></li>
								<li><a href="#migrations">Generate Migrations</a></li>
							</ul>
						</div>
					</div>
				</div>
				
				<div class="ym-g80 ym-gr">
					<div class="ym-gbox">
					
						<!-- Connection Configuration -->
						<h5 id="configuration">Configuration</h5>
						<p>You can set a connection configuration at <code>app/config/bootstrap/connections.php</code></p>
					
						<!-- Building Model -->
						<h5 id="initialization">Building Model</h5>
						<p>In sagalaya we define model using {{ this.html.link('Doctrine Annotation Driver', 'http://www.doctrine-project.org/docs/orm/2.1/en/reference/annotations-reference.html') }}. 
						Every model in app/models folder must be inherited <code>app\extensions\data\Model</code> class. Below is the code example.</p> 
						<pre class="brush: php">								
							namespace app\models;
							
							/**
							 * @Entity(repositoryClass="app\resources\repository\UserRepository")
							 * @HasLifecycleCallbacks
							 * @Table(name="users")
							 */
							class User extends \app\extensions\data\Model {
							    
							    /** @Id @Column(type="integer") @GeneratedValue */
							    protected $id = null;
							
							    /** @Column(type="string", length=64) */
							    protected $fullname = null;
							
							    /** @Column(type="string", length=64) */
							    protected $email = null;
							    
							} 				
						</pre>
						
						<!-- Using Generator -->
						<h5 id="generator">Using XML Generator</h5>
						<p>When build an application, we frequently doing some repetitive task, like create model, controller, view, test.</p>
						<p>So to make faster creating starting code, sagalaya provide generator. Generator will read xml files from <code>app/config/design</code> folder.
						Every xml file will parsed by generator to create model, controller, view, model test, controller test, and repository.</p>
						<p>You can see a sample xml file {{ this.html.link('here', '/files/samples/user.xml') }}. To generate all you just need to call generator in console at project folder.</p>
						<pre class="brush: bash">$> li3 generator</pre>
						 
						<!-- Generate Database Scheme -->
						<h5 id="database-scheme">Generate Database Scheme</h5>
						
						<p>After we crated the class model, we need to create schema database, we can using doctrine command line.</p>
						<pre class="brush: bash">$> li3 doctrine orm:schema-tool:create</pre>
						
						<p>If you already has a schema from previous created schema, and you need to update schema because some changes on model file.
						You can call this command.</p>
						<pre class="brush: bash">$> li3 doctrine orm:schema-tool:update</pre>
						
						<!-- Generate Migrations -->
						<h5 id="migrations">Generate Migrations</h5>
						<p>When we build an app, sometime we need a dummy data. To create that we can using migrations feature in doctrine.</p>
						<pre class="brush: bash">$> li3 doctrine migrations:generate</pre>
						
						<p>This command will generate php file in <code>app/migrations</code> folder that we can fill php code in up() method to create some data</p>
						<pre class="brush: php">
							$type = new UserType(array('type' => 'Administrator'));
							$type->save();
						</pre>
						
						<p>Then you can call up() from migrations from console</p>
						<pre class="brush: bash">$> li3 doctrine migrations:migrate</pre>
						
						<p>There is also down() method, in case you want to revert the migrations. You can write like this.</p>
						<pre class="brush: php">
							$type = UserType::findOneBy(array('type' => 'Administrator'));
							$type->delete();
						</pre>
						<p>To revert migrations you can use this command</p>
						<pre class="brush: bash">$> li3 doctrine migrations:migrate :revision-number</pre>
						
					</div>
				</div>
			</div>																															
		</div>
		
		<h4>Model Use-Case</h4>
		<div class="text">
			<div class="ym-grid">
				
				<div class="ym-g20 ym-gl">
					<div class="ym-gbox">
						<div class="ym-vlist">
							<h6>Chapter Index</h6>
							<ul>
								<li><a href="#crud">Create-Update-Delete</a></li>
								<li><a href="#querying">Querying Model</a></li>
								<li><a href="#model-repository">Model Repository</a></li>
							</ul>
						</div>
					</div>
				</div>
				
				<div class="ym-g80 ym-gr">
					<div class="ym-gbox">

						<!-- CRUD -->
						<h5 id="crud">Create-Update-Delete</h5>
						<p>CRUD is the basic use-case for model, because it will be routine task, we must simplify this process.
						Below is the sample of basic use-case for model</p>
						<pre class="brush: php">
							    public function create()
							    {
							        if ($this->request->data) {
							        	$user = new User($this->request->data);
							
							        	if($user->save()) {
							        		$this->message('Successfully to create User');
							        		$this->redirect('Users::index');
							        	} else {
							        		$this->message('Failed to create User, please check the error');
							        		$errors = $user->getErrors();        		
							        	}
							
							        }
							
							        return compact('user', 'errors');
							    }
						</pre>
						<p>To <strong>create new object</strong>, we need to declared new Object() with params is the default value for object. 
						Usually this is provided from html form data. The important thing is the params must associated with model properties.
						e.g : <code>new User(array('email' => 'some@example.com'))</code>. After initialize value we can call <code>save()</code>
						method to make persistent to database.</p>
						
						<pre class="brush: php">							
							    public function edit()
							    {
							        if ($this->request->id) {
							
							        	$user = User::get($this->request->id);
							        	$user->properties = $this->request->data;
							
							        	if($user->save()) {
							        		$this->message('Successfully to update User');
							        		$this->redirect('Users::index');
							        	} else {
							        		$this->message('Failed to update User, please check the error');
							        		$errors = $user->getErrors();
							        	}
							
							        }
							
							        return compact('user', 'errors');
							    }						
						</pre>
						<p><strong>To update model</strong>, the first thing we must do is calling the model from database with <code>get()</code>.
						This mean, persistent data from database convert to object. After that, we can set <code>$object->properties</code> with new value.
						actually there's no <strong>'properties'</strong> property on object, this is just flag to indicate that we want to update the field.
						e.g : <code>$user->properties = array('email' => 'new@email.com', 'fullname' => 'New Fullname')</code> </p>
						
						<!-- Querying Model -->
						<h5 id="querying">Querying Model</h5>
						<p>Doctrine support {{ this.html.link('DQL','http://www.doctrine-project.org/docs/orm/2.1/en/reference/dql-doctrine-query-language.html') }} 
						or {{ this.html.link('Native SQL','http://www.doctrine-project.org/docs/orm/2.1/en/reference/native-sql.html') }}, 
						but using that methods will break the intuitiveness of ORM. So we provide the powerfull <code>findAll()</code> method, 
						besides the existing <code>findOne</code>, <code>findOneBy</code> methods ({{ this.html.link('see here', 'http://www.doctrine-project.org/docs/orm/2.1/en/reference/working-with-objects.html#querying') }}).</p>
						
						<p>But for <code>findAll()</code> method, we create more features than findAll Doctrine has created. The input for method is array that provide this params : 
						<code>-where and, -where or, '-leftJoin', '-innerJoin', '-orderBy', '-groupBy', '-limit', '-offset'</code>. Below is the code examples.</p>
						
						<pre class="brush: php">
							$users = User::findAll(array(
								'where' => array(
									'and' => array(
										array('fullname' => array('eq' => 'someone')),
										array('email' => array('nlike' => '%@gmail.com%'))
									),
									'or' => array(
										array('active' => array('eq' => true))
									)
								),
								'leftJoin' => array(
									array(
										'field' => 'type'
										'where' => array(
											array('type' => array('eq' => 'Administrator'))
										)
									)
								)
							));
						</pre>
						<p>For <code>leftJoin</code> or <code>innerJoin</code> param, you can set nested leftJoin/innerJoin, and adding condition for every join.</p>
						
						<!-- Model Repository -->
						<h5 id="model-repository">Model Repository</h5>
						<p>A Repository is a mechanism for encapsulating storage, retrieval, and search behavior which emulates a collection of objects.</p>
						
						<p>As default, every model has basic repository methods like <code>find, findOne, findOneBy, findAll</code>. But you can extends function of your models with adding 
						more function to model repository. As default repository placed at <code>app/resources/repository</code>, this path is defined at model class.</p>
						
						<pre class="brush: php">
							/**
							 * @Entity(repositoryClass="app\resources\repository\UserRepository")
							 * @HasLifecycleCallbacks
							 * @Table(name="users")
							 */
							class User extends \app\extensions\data\Model
						</pre>
						<p>On repository class you can adding more function.</p>
						<pre class="brush: php">
							class UserRepository extends \Doctrine\ORM\EntityRepository
							{							
								public function getLastRegisterUser() {
									// doing something
								}
							}
						</pre>
						<p>You can call this function using static method in object</p>
						<pre class="brush: php">$lastRegistered = User::getlastRegisterUser();</pre> 
						
					</div>
				</div>
				
			</div>	
		</div>
		
		<h4>Working with Controller</h4>
		<div class="text">
			<div class="ym-grid">
				
				<div class="ym-g20 ym-gl">
					<div class="ym-gbox">
						<div class="ym-vlist">
							<h6>Chapter Index</h6>
							<ul>
								<li><a href="#default-routing">Default Routing</a></li>
								<li><a href="#action-configuration">Action Configuration</a></li>
								<li><a href="#redirecting">Redirecting</a></li>								
							</ul>
						</div>
					</div>
				</div>
				
				<div class="ym-g80 ym-gr">
					<div class="ym-gbox">
					
						<!-- Default Routing -->
						<h5 id="default-routing">Default Routing</h5>
						
						<!-- Action Configuration -->
						<h5 id="action-configuration">Action Configuration</h5>
						
						<!-- Redirecting -->
						<h5 id="redirecting">Redirecting</h5>
						
						
					</div>
				</div>
				
			</div>	
		</div>
		
		<h4>Working with View</h4>
		<div class="text">
			<div class="ym-grid">
				
				<div class="ym-g20 ym-gl">
					<div class="ym-gbox">
						<div class="ym-vlist">
							<h6>Chapter Index</h6>
							<ul>
								<li><a href="#twig-templating">Twig Templating</a></li>
								<li><a href="#layout">Element and Layout</a></li>
								<li><a href="#view-helper">View Helper</a></li>
							</ul>
						</div>
					</div>
				</div>
				
				<div class="ym-g80 ym-gr">
					<div class="ym-gbox">
						
						<!-- Twig Templating -->
						<h5 id="twig-templating">Twig Templating</h5>
						
						<!-- Element and Layout -->
						<h5 id="layout">Element and Layout</h5>
						
						<!-- View Helper -->
						<h5 id="view-helper">View Helper</h5>
						
					</div>
				</div>
				
			</div>			
		</div>
		
	</div>								 
</div>

<script type="text/javascript">
	SyntaxHighlighter.all();
    $(document).ready(function(){
        $('.jquery_tabs').accessibleTabs({
            tabbody:'.text',
            currentInfoText:'',
            fx:"show",
            fxspeed:null});
	});
</script>